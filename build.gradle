import groovy.json.*

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath("io.spring.gradle:dependency-management-plugin:$springPlatformGradleVersion")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
	}
}

apply plugin: "io.spring.dependency-management"

dependencyManagement {
	imports {
		mavenBom "io.spring.platform:platform-bom:$springPlatformVersion"
	}
}

repositories {
	jcenter()
	mavenLocal()
}

apply plugin: "java"
apply plugin: "org.springframework.boot"
apply plugin: "maven"
apply plugin: "eclipse"

group = "accelerate"
version = "1.0"

task wrapper(type: Wrapper) {
	gradleVersion = gradleVersion
}

/*
 * Configuration
 */
project.ext.buildDate = new Date().format("yyyyMMdd");

/*
 * Dependencies
 */
dependencies {
	// compile dependencies
	implementation ("org.springframework.boot:spring-boot-starter")
	implementation ("org.springframework.boot:spring-boot-starter-aop")
	implementation ("org.springframework:spring-jdbc")
	implementation ("javax.servlet:javax.servlet-api")
	implementation ("com.fasterxml.jackson.core:jackson-annotations")
	implementation ("com.fasterxml.jackson.core:jackson-core")
	implementation ("com.fasterxml.jackson.core:jackson-databind")
	implementation ("org.apache.commons:commons-lang3")
	implementation ("commons-io:commons-io")
	
	//test dependencies
	testImplementation ("org.springframework.boot:spring-boot-starter-test")
	testRuntimeOnly ("org.springframework.boot:spring-boot-devtools")
}

/*
 * Build Settings
 */
compileJava {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

compileTestJava {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

bootRepackage {
	enabled = false
}

jar {
	from sourceSets.main.allSource
	manifest {
		attributes (
			"version-info" : "{'accelerate-utils' : {'gradle-version' : '${gradleVersion}', " 
				+ "'java-version' : '${javaVersion}', 'spring-boot-version' : '${springBootVersion}', "
				+ "'spring-io-version' : '${springPlatformVersion}'}",
			"created": buildDate
		)
    }
}

build.finalizedBy install

/*
 * Eclipse settings
 */
eclipse {
	project {
		natures = ["org.eclipse.wst.common.project.facet.core.nature", 
			"org.eclipse.buildship.core.gradleprojectnature", "org.eclipse.jdt.core.javanature", 
			"org.springframework.ide.eclipse.core.springnature"]
		
		buildCommand "org.eclipse.wst.common.project.facet.core.builder" 
		buildCommand "org.eclipse.buildship.core.gradleprojectbuilder"
		buildCommand "org.eclipse.jdt.core.javabuilder"
		buildCommand "org.springframework.ide.eclipse.core.springbuilder"
		buildCommand "org.springframework.ide.eclipse.boot.validation.springbootbuilder"
	}
	
	classpath {
		defaultOutputDir = file("eclipseBuild")
		
		file {
			whenMerged { classpath ->
				classpath.entries.collect { entry ->
					if (entry.kind == "con" && entry.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
						entry.path = "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-" + javaVersion
					}
					
					entry
				}
			}
		}
	}
	
	jdt {
		sourceCompatibility = javaVersion
		targetCompatibility = javaVersion
		
		file {
			withProperties { properties ->
				properties.put("org.eclipse.jdt.core.compiler.processAnnotations", "disabled")
				properties.put("org.eclipse.jdt.core.compiler.codegen.targetPlatform", javaVersion)
			}
		}
	}
}